{
  "openapi": "3.0.1",
  "info": {
    "title": "SSFA",
    "description": "This document describes the schema used by Marketo Self-Service Flow actions.  By implementing an API conforming to this interface, you can create custom flow actions for use in Marketo Smart Campaigns.  Title will be used to define the service name when ingested in Marketo, while x-providerName should be the name of the organization providing the service.  Use 'version' to indicate the version of your service, use 'x-schemaVersion' to indicate which version of the Service Provider Interface that your service implements.  'servers' may be set if the service host is different from the URL used to access your API definition, if unset the same host will be assumed, values after the first will be ignored.",
    "termsOfService": "https://documents.marketo.com/legal/eusa/us/2012-08-28/",
    "license": {
      "name": "MIT",
      "url": "https://github.com/adobe/Marketo-SSFS-Service-Provider-Interface/blob/master/LICENSE"
    },
    "version": "1.0.1",
    "x-providerName": "This should be the name of the Service Provider, e.g. Adobe Marketo Engage",
    "x-schemaVersion": "1.0.0",
    "x-supportContact": "support@example.com"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "apiKey": []
    },
    {
      "oauth2": []
    },
    {
      "basic": []
    }
  ],
  "tags": [
    {
      "name": "flow action",
      "description": "your service action"
    }
  ],
  "paths": {
    "/submitAsyncAction": {
      "description": "Lead and context data is submitted through this endpoint.  Results should be submitted through callback",
      "post": {
        "tags": [
          "flow action"
        ],
        "operationId": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/async"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Accepted:\n- Webhook created"
          },
          "400": {
            "description": "Bad Request:\n- Expected parameters were missing from the request or were invalid or Invalid document structure"
          },
          "401": {
            "description": "Unauthorized:\n- The API credentials which Marketo has are not authorized to undertake the action"
          },
          "403": {
            "description": "Forbidden:\n- Authentication Failed"
          },
          "429": {
            "description": "Too Many Requests:\n- The service has received too many requests and should retry w/ an appropriate strategy"
          },
          "500": {
            "description": "Internal Server Error:\n- Invoking the service failed for an unknown reason"
          }
        },
        "callbacks": {
          "selfServiceFlowComplete": {
            "{$request.body#/flowComplete}": {
              "post": {
                "parameters": [
                  {
                    "name": "x-api-key",
                    "in": "header",
                    "description": "IO Gateway Key.",
                    "required": true,
                    "style": "simple",
                    "explode": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-callback-token",
                    "in": "header",
                    "description": "Token sent by Marketo during submitAsyncAction invocation.",
                    "required": true,
                    "style": "simple",
                    "explode": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "description": "Flow Action return data for post processing",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/flowCallBack"
                      }
                    }
                  }
                },
                "responses": {
                  "404": {
                    "description": "Not Found",
                    "content": {}
                  },
                  "405": {
                    "description": "Invalid input",
                    "content": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getServiceDefinition": {
      "description": "Defines metadata used to exchange data between Marketo and service provider",
      "get": {
        "summary": "Returns a service definition for user install",
        "responses": {
          "200": {
            "description": "Service Install Metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "description": "Returns status information, notifications and deprecation info from the service.  Polled nightly by Marketo",
      "get": {
        "summary": "Returns status information for the service",
        "responses": {
          "200": {
            "description": "Status info of Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceStatus"
                }
              }
            }
          }
        }
      }
    },
    "/providerInstructions": {
      "description": "Returns html document to embed how-to instructions for any required configuration which is not covered by automated installation",
      "get": {
        "summary": "Returns how-to html",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brandIcon": {
      "description": "Returns an icon to represent brand in Service Providers menu",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/serviceIcon": {
      "description": "Returns an icon to represent brand in Smart Campaign Flow Pallette, and in Service Providers menu",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/getPicklist": {
      "description": "Returns lists of choices for a flow or global parameter.",
      "post": {
        "summary": "Returns lists of choices for a flow or global parameter.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getPicklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns lists of choices for a flow or global parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/picklistObject"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "async": {
        "required": [
          "callbackUrl",
          "campaignId"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "One-time use access token for submitting callback data to Marketo"
          },
          "batchid": {
            "type": "string",
            "description": "ID of the marketo campaign run invoking the service"
          },
          "apiCallBackKey": {
            "type": "string",
            "description": "API key to be used in the callback header"
          },
          "campaignId": {
            "type": "integer",
            "description": "ID of the campaign invoking the service",
            "format": "int32"
          },
          "callbackUrl": {
            "type": "string",
            "description": "URL of the callback to submit data back to",
            "format": "uri",
            "example": "https://adobe.com/send/callback/here"
          },
          "context": {
            "$ref": "#/components/schemas/context"
          },
          "objectData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objectData"
            }
          }
        }
      },
      "context": {
        "required": [
          "subscription"
        ],
        "type": "object",
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/subscription"
          },
          "admin": {
            "$ref": "#/components/schemas/admin"
          },
          "campaign": {
            "$ref": "#/components/schemas/campaign"
          },
          "program": {
            "$ref": "#/components/schemas/program"
          }
        },
        "description": "Object containing contexts to be used for processing"
      },
      "subscription": {
        "required": [
          "munchkinId"
        ],
        "type": "object",
        "properties": {
          "munchkinId": {
            "type": "string",
            "example": "337-INS-529"
          },
          "prefix": {
            "type": "string",
            "example": "customerPrefix"
          },
          "crmSyncStatus": {
            "type": "string",
            "description": "Whether native sync has been enabled and whether it is active"
          }
        },
        "description": "Identifiers for Marketo subscription.  Can be used to locate invoking instance for REST API calls"
      },
      "admin": {
        "type": "object",
        "additionalProperties": true,
        "description": "Global configuration data as defined by Marketo administrator"
      },
      "headers": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/headerAttributeObject"
        },
        "description": "List of headers to be sent in invocation.  Inputs must be added by users in the UI"
      },
      "campaign": {
        "type": "object",
        "properties": {
          "commLimitEnabled": {
            "type": "boolean",
            "description": "Whether communication limits are enabled for invoking campaign"
          },
          "description": {
            "type": "string",
            "description": "Description of invoking campaign from inside Marketo"
          },
          "flowId": {
            "type": "number",
            "description": "Integer id of flow inside of campaign"
          },
          "folderId": {
            "type": "number",
            "description": "Integer id of parent folder"
          },
          "folderName": {
            "type": "string"
          },
          "id": {
            "type": "number",
            "description": "Id of the invoking campaign"
          },
          "name": {
            "type": "string"
          },
          "parentProgramId": {
            "type": "number",
            "description": "Id of parent program if available"
          },
          "smartListId": {
            "type": "number",
            "description": "Id of smart list belonging to the invoking campaign"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "workspaceId": {
            "type": "number"
          },
          "workspaceName": {
            "type": "string"
          }
        },
        "description": "Data related to the invoking Smart Campaign"
      },
      "program": {
        "type": "object",
        "properties": {
          "channelName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "description": "Data related to the parent program of the invoking smart campaign.  May be empty even if required by service provider, if the smart campaign is not housed within a program"
      },
      "flowStepContext": {
        "type": "object",
        "additionalProperties": true,
        "description": "Data related to specific invocation of the flow action.  Property list is defined by 'flow' type service attributes in Service Definition.  Values will be based on inputs given by Marketo users in Smart Campaign UI"
      },
      "myTokenContext": {
        "type": "object",
        "additionalProperties": true,
        "description": "List of tokens matching the list requested in service definition"
      },
      "programMemberContext": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status in program.  Possible values are defined in the program's channel",
            "example": "Registered"
          },
          "id": {
            "type": "number",
            "format": "int64",
            "example": 100000
          },
          "membershipDate": {
            "type": "string",
            "description": "Date when lead became a program member",
            "format": "date-time"
          },
          "reachedSuccess": {
            "type": "boolean",
            "description": "Whether the lead is in a status with the success property true, as defined in the program Channel"
          },
          "reachedSuccessDate": {
            "type": "string",
            "description": "Date when lead first reached a success status in the program",
            "format": "date-time"
          },
          "pmcf": {
            "type": "object",
            "additionalProperties": true,
            "description": "Object containing Program Member Custom fields"
          }
        },
        "description": "Data related to program membership, including status, success, and program-member custom field data.  May be empty even if required if the invoking smart campaign is not housed within a program, or the lead record has not been made a member of the program"
      },
      "triggeringContext": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the primary asset which triggered the invoking campaign",
            "example": "Lead-gen Form"
          },
          "triggerName": {
            "type": "string",
            "description": "Type of event which triggered the invoking campaign",
            "example": "Filled Out Form"
          }
        },
        "description": "Data related to the event which triggered the invoking campaign"
      },
      "objectContext": {
        "discriminator": {
          "propertyName": "authType",
          "mapping": {
            "lead": "#/components/schemas/leadData"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/leadData"
          }
        ]
      },
      "objectData": {
        "required": [
          "objectContext",
          "objectType"
        ],
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "example": "lead",
            "enum": [
              "lead"
            ]
          },
          "objectContext": {
            "$ref": "#/components/schemas/objectContext"
          },
          "flowStepContext": {
            "$ref": "#/components/schemas/flowStepContext"
          },
          "programMemberContext": {
            "$ref": "#/components/schemas/programMemberContext"
          },
          "triggeringContext": {
            "$ref": "#/components/schemas/triggeringContext"
          }
        },
        "description": "Contains lead-data and lead-specific context.  Submitted by Marketo to service."
      },
      "callbackData": {
        "required": [
          "leadData"
        ],
        "type": "object",
        "properties": {
          "activityData": {
            "$ref": "#/components/schemas/callbackData_activityData"
          },
          "leadData": {
            "$ref": "#/components/schemas/leadData"
          }
        }
      },
      "leadData": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": true,
        "description": "Object used to submit data back to lead record.  Included fields must be included in service definition unless userDrivenMapping is false.  Fields must also be mapped and active in Incoming Fields menu for write to succeed."
      },
      "flowCallBack": {
        "required": [
          "munchkinId"
        ],
        "type": "object",
        "properties": {
          "munchkinId": {
            "type": "string",
            "example": "123-ABD-456"
          },
          "defaultValues": {
            "$ref": "#/components/schemas/flowCallBack_defaultValues"
          },
          "errorCode": {
            "type": "string",
            "description": "If set, no objectData will be processed, and an error will be logged with the given errorCode and errorMessage",
            "example": "LOOKUP_VALUE_NOT_FOUND"
          },
          "errorMessage": {
            "type": "string",
            "description": "Message to be logged if errorCode was set.",
            "example": "No value found for search parameters, Key: country Value: Cascadia"
          },
          "objectData": {
            "type": "array",
            "description": "List of lead and activity data to write back to Marketo",
            "items": {
              "$ref": "#/components/schemas/callbackData"
            }
          }
        }
      },
      "serviceDefinition": {
        "required": [
          "apiName",
          "callbackPayloadDef",
          "i18n",
          "invocationPayloadDef",
          "primaryAttribute"
        ],
        "type": "object",
        "properties": {
          "apiName": {
            "type": "string",
            "description": "Default identifier for service and activity.  Users installing multiple service with the same apiName will be prompted to resolve collision by inputting a custom name during installation.  Values 'success', 'reason', and 'errorCode' are always included in activityData and may not be declared here, see '#components/schemas/callbackData'.",
            "example": "lookupTable"
          },
          "i18n": {
            "$ref": "#/components/schemas/serviceDefinition_i18n"
          },
          "caBundle": {
            "type": "string",
            "description": "Location of CA bundle.  Used if your service's SSL certificate chain is not know to Marketo API clients",
            "format": "uri",
            "example": "https://serviceprovider.com/get/caBundle"
          },
          "primaryAttribute": {
            "type": "string",
            "description": "API name of the attribute that describes the primary asset. This must match an attribute from the flow attribute list and *cannot* match an attribute from the callback attribute list."
          },
          "invocationPayloadDef": {
            "$ref": "#/components/schemas/invocationPayloadDefObject"
          },
          "callbackPayloadDef": {
            "$ref": "#/components/schemas/callbackPayloadDefObject"
          }
        },
        "description": "Used to describe configuration and metadata including fields expected during invocation & callback, user inputs on Marketo-side, and other important metadata"
      },
      "serviceI18nObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lookup Table"
          },
          "filterName": {
            "type": "string",
            "example": "Lookup Table was Used"
          },
          "triggerName": {
            "type": "string",
            "example": "Use Lookup Table"
          },
          "description": {
            "type": "string",
            "example": "Use a lookup table to get a value"
          }
        }
      },
      "invocationPayloadDefObject": {
        "type": "object",
        "properties": {
          "globalAttributes": {
            "type": "array",
            "description": "Describes expected global user inputs.  Global attributes can be set during installation or from the Service Provider admin menu.  Global attributes will be included in every invocation if set.",
            "items": {
              "$ref": "#/components/schemas/invocationAttributeObject"
            }
          },
          "flowAttributes": {
            "type": "array",
            "description": "Describes expected flow step inputs.  Flow attributes are set for each individual instance of a flow step and are sent per-lead in the flowStepContext object.",
            "items": {
              "$ref": "#/components/schemas/invocationAttributeObject"
            }
          },
          "fields": {
            "type": "array",
            "description": "Field mappings needed for invocation.  Fields which are mapped in Marketo are sent in the leadContext object.  If userDrivenMapping is 'true', the contents of this array will be ignored",
            "items": {
              "$ref": "#/components/schemas/invocationFieldMapping"
            }
          },
          "headers": {
            "type": "array",
            "description": "List of headers to be included in invocations of /async.  Headers defined here can be populated in the UI by end users",
            "items": {
              "$ref": "#/components/schemas/headerAttributeObject"
            }
          },
          "userDrivenMapping": {
            "type": "boolean",
            "description": "Indicates whether the service will provide a pre-defined list of mappings.  If 'true', 'fields' will be ignored, and mappings must be added manually by users."
          },
          "programContext": {
            "type": "boolean",
            "description": "true if Service Provider needs to access program context"
          },
          "campaignContext": {
            "type": "boolean",
            "description": "true if Service Provider needs to access campaign context"
          },
          "triggerContext": {
            "type": "boolean",
            "description": "true if Service Provider needs to access trigger context"
          },
          "programMemberContext": {
            "type": "boolean",
            "description": "true if Service Provider needs to access member context"
          },
          "subscriptionContext": {
            "type": "boolean",
            "description": "true if Service Provider needs to access subscription context"
          },
          "myTokenContext": {
            "type": "array",
            "description": "List of My Token keys to be sent in invocation.  Should be formatted without brackets or prefix.  e.g. A token from the UI called \"{{my.Event Date}}\" would be requested as \"Event Date\"",
            "example": [
              "Event Date",
              "Event Address"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Describes lead field mappings, flow & global attributes, and contexts required by the service during invocation"
      },
      "callbackPayloadDefObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attributeObject"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/fieldMapping"
            }
          },
          "userDrivenMapping": {
            "type": "boolean",
            "description": "Indicates whether the service will provide a pre-defined list of mappings.  If 'true', 'fields' will be ignored, and mappings must be added manually by users."
          }
        },
        "description": "Describes lead field mappings, and response attributes which can be written to during the callback"
      },
      "invocationAttributeObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/attributeObject"
          },
          {
            "$ref": "#/components/schemas/picklistAttribute"
          }
        ]
      },
      "picklistAttribute": {
        "type": "object",
        "properties": {
          "enforcePicklistSelect": {
            "type": "boolean",
            "description": "Whether or not the attribute value has to be exact match of an entry from the picklist.  Ignored if hasPicklist is false"
          },
          "hasPicklist": {
            "type": "boolean",
            "description": "Whether picklist choices are provided for this attribute."
          }
        }
      },
      "attributeObject": {
        "required": [
          "apiName",
          "dataType",
          "i18n"
        ],
        "type": "object",
        "properties": {
          "apiName": {
            "type": "string",
            "example": "keyValue"
          },
          "i18n": {
            "$ref": "#/components/schemas/attributeObject_i18n"
          },
          "dataType": {
            "$ref": "#/components/schemas/fieldType"
          }
        }
      },
      "headerAttributeObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/picklistAttribute"
          },
          {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the header to send",
                "example": "x-enable-extended-logging"
              },
              "description": {
                "$ref": "#/components/schemas/i18nString"
              }
            }
          }
        ]
      },
      "attributeI18nObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Key Value"
          },
          "description": {
            "type": "string",
            "example": "Marketo field to be used as lookup value"
          },
          "uiTooltip": {
            "type": "string",
            "example": "What Marketo field should be used to find the lookup value?"
          }
        }
      },
      "invocationFieldMapping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fieldMapping"
          },
          {
            "type": "object",
            "properties": {
              "required": {
                "type": "boolean",
                "description": "Whether or not this field is required by the service, thus required during field mapping"
              }
            }
          }
        ]
      },
      "fieldMapping": {
        "required": [
          "dataType",
          "description",
          "serviceAttribute"
        ],
        "type": "object",
        "properties": {
          "serviceAttribute": {
            "type": "string",
            "description": "Name of the attribute as sent during invocation or callback. 'id' is reserved by system and cannot be used here.",
            "example": "providerFieldName"
          },
          "suggestedMarketoAttribute": {
            "type": "string",
            "description": "If this matches the apiName and data type of a Marketo lead field, that field will be populated as the default choice for the mapping during service installation",
            "example": "marketoAttributeName"
          },
          "description": {
            "$ref": "#/components/schemas/i18nString"
          },
          "dataType": {
            "$ref": "#/components/schemas/fieldType"
          }
        }
      },
      "serviceStatus": {
        "type": "object",
        "properties": {
          "info": {
            "type": "array",
            "description": "Array of info notifications to send to Marketo.  Logged as INFO in the service log",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "type": "array",
            "description": "Array of warning notifications to send to Marketo.  Logged as WARN in the service log",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "description": "Array of error notifications to send to Marketo.  Logged as ERROR in the service log",
            "items": {
              "type": "string"
            }
          },
          "deprecationMessage": {
            "type": "string",
            "description": "Message indicating that the service is being deprecated."
          },
          "deprecationDate": {
            "type": "string",
            "description": "If set, and the date is in the past, Marketo will consider the service deprecated. Remove to clear deprecation status",
            "format": "datetime"
          }
        },
        "description": "Object containing status information.  Polled nightly."
      },
      "picklistObject": {
        "required": [
          "choices"
        ],
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "description": "List of choices to be offered in the picklist for the parameter in Marketo",
            "items": {
              "$ref": "#/components/schemas/picklistChoice"
            }
          }
        },
        "description": "Object containing choices for flow and global parameters"
      },
      "picklistChoice": {
        "required": [
          "displayValue",
          "submittedValue"
        ],
        "properties": {
          "displayValue": {
            "$ref": "#/components/schemas/i18nString"
          },
          "submittedValue": {
            "description": "Value which will be submitted when the choice is selected",
            "example": "country-codes.csv",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "description": "Object containing display value and submitted value."
      },
      "fieldMappingContext": {
        "type": "object",
        "properties": {
          "invocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reqFieldMapping"
            }
          },
          "callback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reqFieldMapping"
            }
          }
        },
        "description": "Object containing lists of lead fields which are mapped and sent in the payload of invocation or callback.  May be used to generate picklist choices on the fly based on configuration in Marketo"
      },
      "reqFieldMapping": {
        "required": [
          "marketoAttribute"
        ],
        "type": "object",
        "properties": {
          "marketoAttribute": {
            "type": "string",
            "description": "Marketo API name of the mapped field.  If service is configured to use User-Driven Mappings, only the Marketo Field Name will be sent",
            "example": "email"
          },
          "serviceAttribute": {
            "type": "string",
            "description": "API Name of the mapped field as defined by the service.  Only sent if service does not use User-Driven Mappings",
            "example": "emailAddress"
          }
        },
        "description": "Describes lead field mappings as they are configured in the invoking marketo instance"
      },
      "getPicklistRequest": {
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field to retrieve choices for",
            "example": "table"
          },
          "type": {
            "type": "string",
            "description": "Type of parameter to return choices for.  Either flow or global",
            "enum": [
              "flow",
              "global",
              "header"
            ]
          },
          "fieldMappingContext": {
            "$ref": "#/components/schemas/fieldMappingContext"
          }
        },
        "description": "Schema of requests to /getPicklist"
      },
      "fieldType": {
        "type": "string",
        "description": "Enum of acceptable datatypes for mappings, parameters, and activity attributes",
        "enum": [
          "boolean",
          "integer",
          "date",
          "datetime",
          "email",
          "float",
          "score",
          "string",
          "url",
          "text"
        ]
      },
      "i18nString": {
        "required": [
          "en_US"
        ],
        "type": "object",
        "properties": {
          "en_US": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "string"
        },
        "description": "Used to provide translations for string fields which are surfaced to end users.  Keys should be valid 2-letter language and locale codes, e.g. fr_CA, for Canadian french"
      },
      "callbackData_activityData": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation succeeded for this record"
          },
          "reason": {
            "type": "string",
            "description": "What occurred to cause the operation to fail",
            "example": "No value found for search parameters, Key: country Value: Cascadia"
          },
          "errorCode": {
            "type": "string",
            "description": "Provide an easy-to-reference error code in the case of failure",
            "example": "LOOKUP_VALUE_NOT_FOUND"
          }
        },
        "additionalProperties": true,
        "description": "Object used to submit activity data for a single lead.  Attributes defined as 'response' attributes may be included to write to the activity resulting from invocation"
      },
      "flowCallBack_defaultValues": {
        "type": "object",
        "properties": {
          "leadDefaults": {
            "type": "object",
            "additionalProperties": true,
            "description": "Default values for lead fields"
          },
          "activityDefaults": {
            "type": "object",
            "additionalProperties": true,
            "description": "Default values for activity attributes"
          }
        },
        "description": "If a value for a given record is not set in the objectData array, then it will default to the value set in the corresponding defaults object here if there is one"
      },
      "serviceDefinition_i18n": {
        "type": "object",
        "properties": {
          "en_US": {
            "$ref": "#/components/schemas/serviceI18nObject"
          }
        },
        "description": "Used to provide internationalized strings"
      },
      "attributeObject_i18n": {
        "required": [
          "en_US"
        ],
        "type": "object",
        "properties": {
          "en_US": {
            "$ref": "#/components/schemas/attributeI18nObject"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/attributeI18nObject"
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "basic": {
        "type": "http",
        "scheme": "basic",
        "x-realm-required": false
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://www.example.com/token",
            "refreshUrl": "https://www.example.com/refreshToken",
            "scopes": {}
          },
          "authorizationCode": {
            "authorizationUrl": "https://www.example.com/authorize",
            "tokenUrl": "https://www.example.com/token",
            "refreshUrl": "https://www.example.com/refreshToken",
            "scopes": {},
            "x-grantTypeName": "not_authorization_code",
            "x-clientIdName": "not_client_id",
            "x-clientSecretName": "not_client_secret"
          }
        }
      }
    }
  }
}
